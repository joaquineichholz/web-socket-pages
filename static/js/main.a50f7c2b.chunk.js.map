{"version":3,"sources":["components/disconnect.js","components/connect.js","components/Exchange.js","components/Stock.js","components/ChartStock.js","index.js"],"names":["Disconnect","type","onClick","this","props","disconnect","Component","Connect","connect","Exchange","buy","sell","tickerToExchange","exchange_","exchange","nStocks","dictBuy","dictSell","totalVolume","keys1","Object","keys","filter","obj","indexOf","u","length","ticker","reduce","acc","val","error","console","i","className","map","toLocaleString","parseFloat","toFixed","Stock","value","tickerToCountry","tickerToName","name","countries","delta","lastValue","x","Math","max","min","ChartStock","useState","dataUpdate","data","width","height","dataKey","stroke","label","maeginTop","angle","position","strokeDasharray","time","activeDot","r","socket","io","protocolo","path","App","stockCompanies","setstockCompanies","stock","setstock","setvalue","setTickerToName","setTickerToCountry","setExchange","setdisconnect","setconnect","setBuy","setSell","setTickerToExchange","useEffect","nameToTicker","emit","on","currentData","company_name","state","country","listed_companies","init_data","buyVolume","sellVolume","current","chart","Date","toISOString","substr","volume","company","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a50f7c2b.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nvar color = true;\n\nexport class Disconnect extends Component {\n        \n    render() {\n        return (\n                <button type=\"button\" onClick={this.props.disconnect} > Disconnect</button>\n        )\n    }\n}\n\n\nexport default Disconnect\n","import React, { Component } from 'react'\n\nexport class Connect extends Component {\n\n\n    render() {\n        return (\n                <button type=\"button\" onClick={this.props.connect} >Connect</button>\n        )\n    }\n}\n\nexport default Connect\n\n","import io from 'socket.io-client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useEffect, useState } from 'react';\n\n\n\nexport default function Exchange(props) {\n  \n  const buy = props.buy;\n  const sell = props.sell;\n  const tickerToExchange = props.tickerToExchange;\n  const exchange_ = props.exchange;\n\n  const nStocks = {};\n\n  var dictBuy = {};\n  var dictSell = {};\n\n  var totalVolume = 0;\n\n  const keys1 = Object.keys(buy);\n\n  const keys2 = Object.keys(sell);\n\n  var keys = keys2.filter(function(obj) {return keys1.indexOf(obj) != -1; });\n\n  var u = 0;\n\n\n  for (u=0; u < keys.length; u++){\n\n    var ticker = keys[u];\n    var exchange = tickerToExchange[ticker];\n\n    // check nStock\n    if (!nStocks[exchange]){\n      nStocks[exchange] = 1;\n    }\n\n    // BUY \n    if (dictBuy[exchange] ){\n      try {\n        dictBuy[exchange] += buy[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    else {\n      try {\n        dictBuy[exchange] = buy[ticker].reduce(function(acc, val) { return acc + val; }, 0) \n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n\n    // SELL \n    if (dictSell[exchange] ){\n      try {\n        dictSell[exchange] += sell[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    else {\n      try {\n        dictSell[exchange] = sell[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n  }\n\n  var i = 0;\n  for (i=0; i < Object.keys(dictBuy).length; i++){\n    var exchange = Object.keys(dictBuy)[i];\n    totalVolume += dictBuy[exchange] + dictSell[exchange]\n    \n    if (exchange_[exchange]) {\n      nStocks[exchange] = exchange_[exchange].nStocks;\n    }\n    else {\n      nStocks[exchange] = 2;\n    }\n    }\n  \n\n  // 2. render the line chart using the state\n  return (\n\n    <div>\n      <h1> Exchanges Information</h1>\n    <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Exchange </th>\n          <th> BUY Volume  </th>\n          <th> SELL Volume </th>\n          <th> Total Volume </th>\n          <th> N Stocks </th>\n          <th> Participation </th>\n      </tr>\n      </thead>\n      <thead>\n\n      {Object.keys(dictBuy).map((exchange) => (\n        <tr>\n            <td> {exchange} </td>\n            <td> {dictBuy[exchange].toLocaleString()} </td>\n            <td> {dictSell[exchange].toLocaleString()} </td>\n            <td> {(dictBuy[exchange] + dictSell[exchange]).toLocaleString()} </td>\n            <td> {nStocks[exchange].toLocaleString()} </td>\n            <td> {parseFloat((dictBuy[exchange] + dictSell[exchange]) * 100/ totalVolume ).toFixed(4)+\"%\"} </td>  \n            </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n    </div>\n    \n  );\n};\n\n\n\n/*\n\nexport default function Exchange(props) {\n  \n  const exchange = props.exchange;\n  var totalVolume = 1;\n\n  const keys = Object.keys(exchange);\n\n  var i = 0;\n  for (i=0; i < keys.length; i++){\n    totalVolume = exchange[keys[i]].buyVolume + exchange[keys[i]].sellVolume + totalVolume\n  }\n\n  // 2. render the line chart using the state\n  return (\n\n    <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Exchange </th>\n          <th> BUY Volume  </th>\n          <th> SELL Volume </th>\n          <th> Total Volume </th>\n          <th> N Stocks </th>\n          <th> Participation </th>\n      </tr>\n      </thead>\n      <thead>\n\n      {Object.keys(exchange).map((ticker) => (\n        <tr>\n            <td> {ticker} </td>\n            <td> {exchange[ticker].buyVolume.toLocaleString()} </td>\n            <td> {exchange[ticker].sellVolume.toLocaleString()} </td>\n            <td> {(exchange[ticker].buyVolume + exchange[ticker].sellVolume).toLocaleString()} </td>\n            <td> {exchange[ticker].nStocks.toLocaleString()} </td>\n            <td> {parseFloat((exchange[ticker].buyVolume + exchange[ticker].sellVolume) * 100 / totalVolume).toFixed(2)+\"%\" } </td>\n        \n            </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n  );\n};\n\n*/","import React from 'react';\n\n\nexport default function Stock(props) {\n  \n  const value = props.value;\n  const buy = props.buy;\n  const sell = props.sell;\n  const tickerToCountry = props.tickerToCountry;\n  const tickerToName = props.tickerToName;\n\n  const name = {};\n  const countries = {};\n\n  var dictBuy = {};\n  var dictSell = {};\n\n  const keys1 = Object.keys(buy);\n\n  const keys2 = Object.keys(sell);\n\n  var keys = keys2.filter(function(obj) {return keys1.indexOf(obj) != -1; });\n\n  var u = 0;\n\n  for (u=0; u < keys.length; u++){\n\n    var ticker = keys[u];\n\n    if (tickerToName[ticker]) {\n      name[ticker] = tickerToName[ticker];\n    }\n    else {\n      name[ticker] = ':)'\n    }\n\n    if (tickerToCountry[ticker]) {\n      countries[ticker] = tickerToCountry[ticker];\n    }\n    else {\n      countries[ticker] = ':)'\n    }\n\n    // BUY \n    if (dictBuy[ticker] ){\n      try {\n        dictBuy[ticker] += buy[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    else {\n      try {\n        dictBuy[ticker] = buy[ticker].reduce(function(acc, val) { return acc + val; }, 0) \n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    // SELL \n    if (dictSell[ticker] ){\n      try {\n        dictSell[ticker] += sell[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n    else {\n      try {\n        dictSell[ticker] = sell[ticker].reduce(function(acc, val) { return acc + val; }, 0)\n      }\n      catch (error) {\n        console.error(error);\n      }\n    }\n  }\n  var delta = {};\n  var lastValue = {};\n\n  keys = Object.keys(value);\n  var i = 0;\n\n  //console.log(value);\n\n  for (i=0; i < keys.length; i++){\n    //console.log('    ', keys[i], value[keys[i]]);\n    if (value[keys[i]].length > 2) {\n      var x = 0;\n      for (x=0; x < value[keys[i]].length - 3; x++){\n        delta[keys[i]] = (value[keys[i]][value[keys[i]].length - 2 - x] - value[keys[i]][value[keys[i]].length - 1]) / value[keys[i]][value[keys[i]].length - 2 - x];\n        if (delta[keys[i]] != 0) {\n          break;\n        }\n      }\n\n      lastValue[keys[i]] = value[keys[i]][value[keys[i]].length - 1];\n      //console.log(delta)\n    }\n    else if (value[keys[i]].length > 1){\n      delta[keys[i]] = 0;\n      lastValue[keys[i]] = value[keys[i]][value[keys[i]].length - 1];\n    }\n\n    else {\n      delta[keys[i]] = 0;\n      lastValue[keys[i]] = 0;\n    }\n\n  }\n\n\n  // 2. render the line chart using the state\n  // </tr>/{buyVolume[ticker].reduce(function(acc, val) { return acc + val; }, 0).toLocaleString()} </td>\n  return (\n    <div>\n      <h1> Stocks Information </h1>\n\n  <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Name </th>\n          <th> Country </th>\n          <th> Ticker </th>\n          <th> Total Volume  </th>\n          <th> Historical HIGH  </th>\n          <th> Historical LOW </th>\n          <th> Last Price </th>\n          <th> Delta Price (with the last different) </th>\n      </tr>\n      </thead>\n      <thead>\n\n      {keys.map((ticker) => (\n        <tr>\n            <td> {name[ticker]} </td>\n            <td> {countries[ticker]} </td>\n            <td> {ticker} </td>\n            <td> {(dictSell[ticker] + dictSell[ticker]).toLocaleString()} </td> \n            <td> {Math.max(...value[ticker]).toLocaleString()} </td>\n            <td> {Math.min(...value[ticker]).toLocaleString()} </td>\n            <td> {lastValue[ticker]} </td>\n            <td> {parseFloat(delta[ticker]* 100).toFixed(4)+\"%\"} </td>\n\n      </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n    </div>\n    \n  );\n};\n\n\n\n  /*\n  const buyVolume = props.volumeBuyByStock;\n\n\n\n  const keys = Object.keys(buyVolume);\n\n  // 2. render the line chart using the state\n  return (\n\n    <table className=\"table\"> \n    <thead>\n      <tr className=\"table\">\n          <th> Ticker </th>\n          <th> Total Volume  </th>\n          <th> Historical HIGH  </th>\n          <th> Historical LOW </th>\n          <th> Last Price </th>\n          <th> Delta Price </th>\n      </tr>\n      </thead>\n      <thead>\n\n      {keys.map((ticker) => (\n        <tr>\n            <td> {ticker} </td>\n            <td> {buyVolume[ticker].reduce(function(acc, val) { return acc + val; }, 0).toLocaleString()} </td>\n            <td> {Math.max(...buyVolume[ticker]).toLocaleString()} </td>\n            <td> {Math.min(...buyVolume[ticker]).toLocaleString()} </td>\n            <td> {1000} </td>\n            <td> {1000} </td>\n\n      </tr>\n        ))\n        }\n        </thead>\n     \n      </table>\n  );\n};\n*/","import io from 'socket.io-client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport {\n  BarChart,\n  Bar,\n  Line,\n  LineChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  CartesianGrid\n} from 'recharts';\n\n\n\nexport default function ChartStock(props) {\n  const [dataUpdate, setDataUpdate] = useState([]);\n\n  \n\n  const data = props.data;\n\n var ticker = 'NaN'\n  if (dataUpdate.length > 0){\n    ticker = dataUpdate[0].ticker\n  }\n\n  // 2. render the line chart using the state\n  return (\n    <div>\n      <LineChart width={450} height={300} data={data}>\n        <XAxis dataKey=\"time\"  stroke=\"#7c795d\" label={{ value:\"Tiempo\", maeginTop:\"100px\" ,angle: -90, position:\"insideBottom\" }}/>\n        <YAxis  stroke=\"#7c795d\" label={{ value:\"Valor\", angle: -90 }}/>\n        <Tooltip/>\n        <CartesianGrid  stroke=\"#7c795d \" strokeDasharray=\"5 5\"/>\n        <Line time=\"monotone\" dataKey=\"value\" stroke=\"#4CAF50\" activeDot={{r: 8}} />\n      </LineChart>\n\n    </div>\n  );\n};","import io from 'socket.io-client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { useEffect, useState } from 'react';\nimport './css/navbar.css'\n\n\nimport Disconnect from './components/disconnect';\nimport Connect from './components/connect';\n\nimport Exchange from './components/Exchange';\nimport Stock from './components/Stock';\nimport ChartStock from './components/ChartStock';\n\nconst protocolo = \"wss://\";\nconst servidor = \"le-18262636.bitzonte.com\";\nconst ruta = \"/stocks\";\n\nconst socket = io(protocolo + servidor , {\n  path: ruta\n  });\n\n  \nconst App = ({}) => {\n  \n\n  const [stockCompanies, setstockCompanies] = useState([]);\n  const [stock, setstock] = useState({});\n  const [value, setvalue] = useState({})\n  const [tickerToName, setTickerToName] = useState({})\n  const [tickerToCountry, setTickerToCountry] = useState({})\n  const [exchange, setExchange] = useState({});\n\n  const [disconnect, setdisconnect] = useState();\n  const [connect, setconnect] = useState();\n\n  const [buy, setBuy] = useState({})\n  const [sell, setSell] = useState({})\n\n  const [tickerToExchange, setTickerToExchange] = useState({})  \n\n\n useEffect(() => {\n   const nameToTicker = {};\n   socket.emit('STOCKS', () => {\n  })\n  \n\n  socket.on('STOCKS', data => {   \n    // agrego las empresas a StockCompanies  \n    for (var i = 0; i < data.length; i++) {\n      setstockCompanies(currentData => [...currentData, data[i]])\n \n      nameToTicker[data[i].company_name] = data[i].ticker\n      setTickerToName(state => ({...state, [data[i].ticker]:  data[i].company_name}))\n      setTickerToCountry(state => ({...state, [data[i].ticker]:  data[i].country}))\n    }\n    socket.emit('EXCHANGES', (data) => {\n    });\n  });\n\n  socket.on('EXCHANGES', data => {   \n    Object.keys(data).map((exchange_) => {\n      var nStocks = 0;\n      for (var i = 0; i < data[exchange_].listed_companies.length; i++) {\n        nStocks++\n        setTickerToExchange(state => ({...state, [nameToTicker[data[exchange_].listed_companies[i]]]:  exchange_}))\n      }\n      const init_data = {\n        buyVolume: 0,\n        sellVolume: 0,\n        nStocks: nStocks,\n        country: data[exchange_].country\n      }\n      setExchange(state => ({...state, [exchange_]:  init_data}))\n    })\n    //setExchangeInit(true)\n  })\n}, [])\n\n\nuseEffect(() => {\n  socket.on('UPDATE', current => {\n    var chart = {\n      time: new Date(current.time).toISOString().substr(11,5),//.getHours() + ':' + new Date(current.time).toISOString().getMinutes(),\n      value: current.value\n    }\n    setstock(state => ({...state, [current.ticker]: [...(state[current.ticker] || []), chart]}))\n    setvalue(state => ({...state, [current.ticker]: [...(state[current.ticker] || []), chart.value]}))\n  });\n\n}, []);\n\n\nuseEffect(() => {\n  socket.on('BUY', current => { \n    setBuy(state => ({...state, [current.ticker]: [...(state[current.ticker] || []), current.volume]}))\n  });\n  }, []);\n  \n  useEffect(() => {\n    socket.on('SELL', current => { \n      setSell(state => ({...state, [current.ticker]: [...(state[current.ticker] || []), current.volume]}))\n    });\n  }, []);\n\n  return (\n    <div>\n            <ul className=\"nav-ul\">\n                <li className=\"nav-li\"> <Disconnect disconnect={\n                () => {\n                  setdisconnect(socket.disconnect())\n                  }} />  \n              </li>\n              <li className=\"nav-li\"> <Connect connect={\n                () => {\n                  setconnect(socket.connect())\n                  }} />  \n              </li>\n   \n          </ul>\n      <Exchange buy={buy} sell={sell} exchange={exchange} tickerToExchange={tickerToExchange}/>\n      <Stock tickerToCountry={tickerToCountry} tickerToName={tickerToName} buy={buy} sell={sell} value={value} exchange={exchange} tickerToExchange={tickerToExchange}/>\n\n      <div className=\"chartSpace\">  \n          {stockCompanies.map((company) => (\n            <div className=\"chart\"> \n            <h2> {company.ticker} </h2>\n              <div> \n                <ChartStock key={company.ticker} data={stock[company.ticker]} />\n              </div>\n            </div>\n            ) )     \n          }\n      </div>\n      \n    </div>\n  );\n  \n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}